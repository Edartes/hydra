[% WRAPPER layout.tt title=
    (create ? "Creating jobset in project $project.name" :
     createFromEval ? "Creating jobset from evaluation $eval.id of $project.name:$jobset.name" :
     cloneJobset ? "Cloning jobset $project.name:$jobset.name" :
     "Editing jobset $project.name:$jobset.name") %]
[% PROCESS common.tt %]
[% USE format %]

[% BLOCK renderJobsetInput %]
  <tr class="input [% extraClass %]" [% IF id %]id="[% id %]"[% END %]>
    <td>
      <button type="button" class="btn btn-warning" onclick='$(this).parents(".input").remove()'><i class="icon-trash icon-white"></i></button>
    </td>
    <td>
      <input type="text" id="[% baseName %]-name" name="[% baseName %]-name" [% HTML.attributes(value => input.name) %]/>
    </td>
    <td>
      [% INCLUDE renderSelection curValue=input.type
                                 param="$baseName-type"
                                 options=inputTypeNames
                                 edit=1 %]
    </td>
    <td>
      <input type="checkbox" id="[% baseName %]-emailresponsible" name="[% baseName %]-emailresponsible" [% IF input.email_responsible; 'checked="checked"'; END %]/>
    </td>
    <td>
      <div [% HTML.attributes(id => "$baseName-properties") %]></div>
      <input type="hidden" [% HTML.attributes(
        value => input ? encode_json(input.properties) : "{}",
        name => "$baseName-properties"
      ) %] />
    </td>
  </tr>
[% END %]

[% BLOCK renderJobsetInputs %]
  <table class="table table-striped table-condensed">
    <thead>
      <tr>
        <th></th>
        <th>Input name</th>
        <th>Type</th>
        <th>Notify committers</th>
        <th style="width: 50%">Properties</th>
      </tr>
    </thead>
    <tbody class="inputs">
      [% inputs = createFromEval ? eval.jobset_eval_inputs : jobset.jobset_inputs; FOREACH input IN inputs %]
        [% INCLUDE renderJobsetInput input=input
                                     baseName="input-$input.name"
                                     extraClass="existing-input" %]
      [% END %]
      <tr>
        <td colspan="4" style="text-align: center;"><button type="button" class="add-input btn btn-success"><i class="icon-plus icon-white"></i> Add a new input</button></td>
      </tr>
    </tbody>
  </table>
[% END %]

<form class="form-horizontal">

  <fieldset>

    <div class="control-group">
      <label class="control-label">State</label>
      <div class="controls">
        <div class="btn-group" data-toggle="buttons-radio">
          <input type="hidden" name="enabled" value="[% jobset.enabled %]" />
          <button type="button" class="btn" value="1">Enabled</button>
          <button type="button" class="btn" value="2">One-shot</button>
          <button type="button" class="btn" value="0">Disabled</button>
        </div>
      </div>
    </div>

    <div class="control-group">
      <div class="controls">
        <label class="checkbox">
          <input type="checkbox" name="visible" [% IF !jobset.hidden; 'checked="checked"'; END %]/>Visible
        </label>
      </div>
    </div>

    <div class="control-group">
      <label class="control-label">Identifier</label>
      <div class="controls">
        <input type="text" class="span3" name="name" [% HTML.attributes(value => edit ? jobset.name : "") %]/>
      </div>
    </div>

    <div class="control-group">
      <label class="control-label">Description</label>
      <div class="controls">
        <input type="text" class="span3" name="description" [% HTML.attributes(value => jobset.description) %]/>
      </div>
    </div>

    <div class="control-group">
      <label class="control-label">Nix expression</label>
      <div class="controls">
        <input type="text" class="span3" name="nixexprpath" [% HTML.attributes(value => jobset.nix_expr_path) %]/>
        in
        <input type="text" class="span3" name="nixexprinput" [% HTML.attributes(value => jobset.nix_expr_input) %]/>
      </div>
    </div>

    <div class="control-group">
      <label class="control-label">Check interval</label>
      <div class="controls">
        <div class="input-append">
          <input type="number" class="span3" name="checkinterval" [% HTML.attributes(value => jobset.check_interval) %]/>
          <span class="add-on">sec</span>
        </div>
        <span class="help-inline">(0 to disable polling)</span>
      </div>
    </div>

    <div class="control-group">
      <label class="control-label">Scheduling shares</label>
      <div class="controls">
        <div class="input-append">
          <input type="number" class="span3" name="schedulingshares" [% HTML.attributes(value => jobset.scheduling_shares) %]/>
        </div>
        [% IF totalShares %]
          <span class="help-inline">([% f = format("%.2f"); f(jobset.scheduling_shares / totalShares * 100) %]% out of [% totalShares %] shares)</span>
        [% END %]
      </div>
    </div>

    <div class="control-group">
      <div class="controls">
        <label class="checkbox">
          <input type="checkbox" name="enableemail" [% IF jobset.enable_email; 'checked="checked"'; END %]/>Email notification
        </label>
      </div>
    </div>

    <div class="control-group">
      <label class="control-label">Email override</label>
      <div class="controls">
        <input type="text" class="span3" name="emailoverride" [% HTML.attributes(value => jobset.email_override) %]/>
      </div>
    </div>

    <div class="control-group">
      <label class="control-label">Number of evaluations to keep</label>
      <div class="controls">
        <input type="number" class="span3" name="keepnr" [% HTML.attributes(value => jobset.keepnr) %]/>
      </div>
    </div>

    [% INCLUDE renderJobsetInputs %]

    <div class="form-actions">
      <button id="submit-jobset" type="submit" class="btn btn-primary"><i class="icon-ok icon-white"></i> [%IF !edit %]Create jobset[% ELSE %]Apply changes[% END %]</button>
    </div>

  </fieldset>

  <table style="display: none">
    [% INCLUDE renderJobsetInput input="" extraClass="template" id="input-template" baseName="input-template" %]
  </table>

</form>

<script type="text/javascript">
  /* Reduce a list of [key, value] arrays into a a closure that returns an
   * object. */
  function reduceDischargers(dischargers) {
    return function() {
      return dischargers.reduce(function(values, discharger) {
        var discharged = discharger();
        if (discharged[1] === null) return values;
        values[discharged[0]] = discharged[1];
        return values;
      }, {});
    };
  }

  /* Push a key (optionally can be a function as well) and a function for the
   * value into a list of dischargers. */
  function pushDischarger(dischargers, key, fun) {
    dischargers.push(function() {
      if (typeof key === "function")
        return [key(), fun()];
      else
        return [key, fun()];
    });
  }

  /* Create a single key/value field for the "attrset" property type. */
  function createAttr(dischargers, root, key, val) {
    var deleteButton = $('<button/>', {
      type: 'button',
      class: 'btn btn-warning btn-mini',
    });
    deleteButton.append('<i class="icon-trash icon-white"></i>');

    var keyElem = $('<dt/>');
    var keyInput = $('<input/>', {type: 'text', value: key});
    keyElem.append(deleteButton, keyInput);

    var dataElem = $('<dd/>');
    var dataInput = $('<input/>', {type: 'text', value: val});
    dataElem.append(dataInput);

    root.append(keyElem, dataElem);

    deleteButton.click(function() {
      keyInput.val("");
      dataInput.val("");
      keyElem.remove();
      dataElem.remove();
    });

    pushDischarger(dischargers, function() {
      return keyInput.val();
    }, function() {
      var dispatched = dataInput.val();
      return dispatched === "" ? null : dispatched;
    });
  }

  /* Create a single form field for a specific property and return an object
   * consisting of the DOM element and the discharger function.
   */
  function createProperty(spec, value) {
    var required = "required" in spec ? spec.required : false;
    switch (spec.type) {
      case "bool":
        var boolInput = $('<input/>', {type: 'checkbox'});
        boolInput.prop('checked', value);
        var defVal = "defaultValue" in spec ? spec.defaultValue : false;
        return {
          elem: boolInput,
          discharge: function() {
            var discharged = boolInput.is(':checked');
            if (!required && discharged === defVal)
              return null;
            else
              return discharged;
          },
        };
      case "attrset":
        var container = $('<div/>');
        var existing = $('<dl/>', {class: 'properties'});
        var dischargers = [];
        for (key in value) {
          createAttr(dischargers, existing, key, value[key]);
        }
        var addButton = $('<button/>', {
          type: 'button',
          class: 'btn btn-success btn-mini',
        });
        addButton.text('Add a new attribute');
        addButton.prepend('<i class="icon-plus icon-white"></i>');
        addButton.click(function() {
          createAttr(dischargers, existing);
          return false;
        });
        container.append(existing, addButton);
        return {
          elem: container,
          discharge: function() {
            var discharged = reduceDischargers(dischargers)();
            if (!required && jQuery.isEmptyObject(discharged))
              return null;
            else
              return discharged;
          }
        };
      default:
        var defInput = $('<input/>', {type: 'text', value: value});
        return {
          elem: defInput,
          discharge: function() {
            var discharged = defInput.val();
            if (!required && discharged === "")
              return null;
            else
              return discharged;
          }
        };
    }
  }

  /* Create a series of properties for the given spec and optionally its
   * pre-existing values and return an object of its DOM root element and the
   * discharger function.
   */
  function updateProperties(spec, propField, propValues) {
    if (spec.hasOwnProperty('singleton')) {
      spec.singleton['required'] = true;
      var prop = createProperty(spec.singleton, propValues.value);
      return {
        elem: prop.elem,
        discharge: function() {
          return {value: prop.discharge()};
        }
      };
    } else {
      var container = $('<div/>');
      var elem = $('<dl/>', {class: 'properties'});
      var dischargers = [];
      var sortedKeys = Object.keys(spec.properties).sort(function(a, b) {
        var pa = spec.properties[a];
        var pb = spec.properties[b];
        if (pa.required && !pb.required) return -1;
        if (pb.required && !pa.required) return 1;
        return a.localeCompare(b);
      });
      var hasOptionals = false;
      for (var i in sortedKeys) {
        var name = sortedKeys[i];

        var label = $('<dt/>').text(spec.properties[name].label);
        if (!spec.properties[name].required) {
          label.prop('class', 'prop-optional');
          label.hide();
          hasOptionals = true;
        }
        elem.append(label);

        var prop = createProperty(spec.properties[name], propValues[name]);
        if ("help" in spec.properties[name])
          prop.elem.prop('title', spec.properties[name].help);
        var data = $('<dd/>').append(prop.elem);
        if (!spec.properties[name].required) {
          data.prop('class', 'prop-optional');
          data.hide();
        }
        elem.append(data);

        pushDischarger(dischargers, name, prop.discharge);
      }
      container.append(elem);
      if (hasOptionals) {
        var showOptionals = $('<button/>', {
          type: 'button',
          class: 'btn btn-info btn-mini',
        });
        showOptionals.text('optional properties');
        showOptionals.prepend('<i class="icon-arrow-down icon-white"></i>');
        showOptionals.click(function() {
          var optionals = $(container).find('.prop-optional');
          var buttonIcon = $(showOptionals).find('i');
          if (optionals.is(':visible')) {
            buttonIcon.prop('class', 'icon-arrow-down icon-white');
            optionals.hide();
          } else {
            buttonIcon.prop('class', 'icon-arrow-up icon-white');
            optionals.show();
          }
          return false;
        });
        container.append(showOptionals);
      }

      return {
        elem: container,
        discharge: reduceDischargers(dischargers)
      };
    }
  }

  var dischargeMap = {};

  function initProperties(node, pspec) {
    if (typeof initProperties.pspec === 'undefined')
      initProperties.pspec = pspec;

    var dischargers = {};
    node.find("[id^=input-][id$=-properties]").each(function() {
      var propContainer = $(this);
      var propField = propContainer.next();
      var propValues = JSON.parse(propField.val());
      var jobsetInput = $(this).closest(node);
      var typeField = jobsetInput.find("select[name$=-type]");
      var keyField = jobsetInput.find("input[name$=-name]")
      var newProps = updateProperties(
        initProperties.pspec[typeField.val()], propField, propValues
      );
      propContainer.html(newProps.elem);
      dischargeMap[keyField.prop('name')] = newProps.discharge;
      typeField.change(function() {
        var newProps = updateProperties(
          initProperties.pspec[$(this).val()], propField, propValues
        );
        propContainer.html(newProps.elem);
        dischargeMap[keyField.prop('name')] = newProps.discharge;
      });
    });
  }

  $(document).ready(function() {
    var id = 0;

    $(".add-input").click(function() {
      var newid = "input-" + id++;
      var x = $("#input-template").clone(true).attr("id", "").insertBefore($(this).parents("tr")).show();
      $("#input-template-name", x).attr("name", newid + "-name");
      $("#input-template-type", x).attr("name", newid + "-type");
      $("#input-template-properties", x).attr("id", newid + "-properties");
      $("input[name=input-template-properties]", x).attr("name", newid + "-properties");
      $("#input-template-emailresponsible", x).attr("name", newid + "-emailresponsible");
      $("#input-template", x).attr("id", newid);
      initProperties(x);
      return false;
    });

    requestJSON({
      url: "[% c.uri_for('/jobset' project.name jobset.name) %]",
      type: 'OPTIONS',
      success: function (pspec) {
        initProperties($(".existing-input"), pspec);
      },
    });
  });

  $("#submit-jobset").click(function() {
    var formElements = $(this).parents("form").serializeArray();
    var data = { 'inputs': {} };
    var inputs = {};
    for (var i = 0; formElements.length > i; i++) {
      var elem = formElements[i];
      var match = elem.name.match(/^input-([\w-]+)-(\w+)$/);
      if (match === null) {
        data[elem.name] = elem.value;
      } else {
        var baseName = match[1];
        var param = match[2];

        if (baseName === "template") continue;

        if (!(baseName in inputs))
          inputs[baseName] = {};

        if (param === "name") {
          data.inputs[elem.value] = inputs[baseName];
        } else if (param === "properties") {
          var key = 'input-' + baseName + '-name';
          inputs[baseName][param] = dischargeMap[key]();
        } else {
          inputs[baseName][param] = elem.value;
        }
      }
    }
    redirectJSON({
      [% IF !edit %]
        url: "[% c.uri_for('/jobset' project.name '.new') %]",
      [% ELSE %]
        url: "[% c.uri_for('/jobset' project.name jobset.name) %]",
      [% END %]
      data: JSON.stringify(data),
      contentType: 'application/json',
      type: 'PUT'
    });
    return false;
  });
</script>

[% END %]
